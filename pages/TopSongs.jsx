import react, { useEffect } from "react";
import Head from "next/head";
import styles from "../styles/pages/Tops.module.scss";
import RankingItemSong from "../src/components/RankingItemSong";
import { login, SpotifyApi, runRefreshToken } from "../src/services/spotify";
import nookies from "nookies";

export default function TopSongs({ data, runLogin }) {
  const { topS, topM, topL } = data;
  useEffect(() => {
    if (runLogin) {
      console.error("no token");
      login();
    }
  }, [runLogin]);

  function mountList(track, index) {
    if (index === 0) {
      return (
        <RankingItemSong
          rank={index + 1}
          img={track.album.images[1].url}
          title={track.name}
          artist={track.artists[0].name}
          bgc="#fcdb66"
          fc="black"
          key={index}
        />
      );
    } else if (index === 1) {
      return (
        <RankingItemSong
          rank={index + 1}
          img={track.album.images[1].url}
          title={track.name}
          artist={track.artists[0].name}
          bgc="#afb8c0"
          fc="black"
          key={index}
        />
      );
    } else if (index === 2) {
      return (
        <RankingItemSong
          rank={index + 1}
          img={track.album.images[1].url}
          title={track.name}
          artist={track.artists[0].name}
          bgc="#c59455"
          fc="black"
          key={index}
        />
      );
    } else {
      return (
        <RankingItemSong
          rank={index + 1}
          img={track.album.images[1].url}
          title={track.name}
          artist={track.artists[0].name}
          bgc="#212121"
          fc="white"
          key={index}
        />
      );
    }
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Spotify Stats - Top Songs</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.pageTitle}>
        <h2>Top Songs</h2>
      </div>

      <div className={styles.top}>
        <div className={styles.timePeriod}>
          <h3>1 month</h3>
          <div>
            <ul>{topS.map((track, index) => mountList(track, index))}</ul>
          </div>
        </div>
        <div className={styles.timePeriod}>
          <h3>6 months</h3>
          <div>
            <ul>{topM.map((track, index) => mountList(track, index))}</ul>
          </div>
        </div>
        <div className={styles.timePeriod}>
          <h3>6 months</h3>
          <div>
            <ul>{topL.map((track, index) => mountList(track, index))}</ul>
          </div>
        </div>
      </div>
    </div>
  );
}

export async function getServerSideProps(ctx) {
  const cookies = nookies.get(ctx);

  if (cookies.access_token) {
    const data = await getLists(cookies.access_token);

    return { props: { data, runLogin: false } };
  } else {
    return {
      props: { data: { topS: [], topM: [], topL: [] }, runLogin: true },
    };
  }
}

async function getLists(token) {
  SpotifyApi.setAccessToken(token);
  try {
    const topS = await SpotifyApi.getMyTopTracks({
      limit: 10,
      offset: 0,
      time_range: "short_term",
    });

    const topM = await SpotifyApi.getMyTopTracks({
      limit: 10,
      offset: 0,
      time_range: "medium_term",
    });

    const topL = await SpotifyApi.getMyTopTracks({
      limit: 10,
      offset: 0,
      time_range: "long_term",
    });

    return {
      topS: topS.body.items,
      topM: topM.body.items,
      topL: topL.body.items,
    };
  } catch (e) {
    if (e.body.message === "The access token expired") {
      const newCookies = await runRefreshToken(ctx);
      SpotifyApi.setAccessToken(newCookies.access_token);
      try {
        const topS = await SpotifyApi.getMyTopTracks({
          limit: 10,
          offset: 0,
          time_range: "short_term",
        });

        const topM = await SpotifyApi.getMyTopTracks({
          limit: 10,
          offset: 0,
          time_range: "medium_term",
        });

        const topL = await SpotifyApi.getMyTopTracks({
          limit: 10,
          offset: 0,
          time_range: "long_term",
        });

        return {
          topS: topS.body.items,
          topM: topM.body.items,
          topL: topL.body.items,
        };
      } catch (err) {
        console.error("second err", err);
      }
    }
  }
}
